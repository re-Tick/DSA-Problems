1. Problem: Coin Change Problem (gfg)
   Code:    long long int count(int arr[], int m, int n) {
                long long int dp[n+1];
                for(int i=0; i<=n ;i++){
                    dp[i] = 0;
                }
                dp[0] = 1;
                for(int i=0; i<m ;i++){    
                    for(int j=1; j<=n ;j++){
                        if(arr[i] <= j)
                            dp[j] += dp[j-arr[i]]; 
                    }
                }
                return dp[n];
                // code here.
            }

2. Problem: KnapSack Problem
   Code:    int knapSack(int W, int wt[], int val[], int n)
            {
                int i, w;
                vector<vector<int>> K(n + 1, vector<int>(W + 1));
            
                // Build table K[][] in bottom up manner
                for(i = 0; i <= n; i++)
                {
                    for(w = 0; w <= W; w++)
                    {
                        if (i == 0 || w == 0)
                            K[i][w] = 0;
                        else if (wt[i - 1] <= w)
                            K[i][w] = max(val[i - 1] +
                                            K[i - 1][w - wt[i - 1]],
                                            K[i - 1][w]);
                        else
                            K[i][w] = K[i - 1][w];
                    }
                }
                return K[n][W];
            }        

3. Problem: nCr (combination problem gfg)
   Approach:nCr = (n-1)Cr + (n-1)C(r-1)
   Code:    // Returns value of Binomial Coefficient C(n, k)
            int binomialCoeffUtil(int n, int k, int** dp)
            {
                // If value in lookup table then return
                if (dp[n][k] != -1) //     
                    return dp[n][k];
            
                // store value in a table before return
                if (k == 0) {
                    dp[n][k] = 1;
                    return dp[n][k];
                }
                
                // store value in table before return
                if (k == n) {
                    dp[n][k] = 1; 
                    return dp[n][k];
                }
                
                // save value in lookup table before return
                dp[n][k] = binomialCoeffUtil(n - 1, k - 1, dp) +
                        binomialCoeffUtil(n - 1, k, dp);
                return dp[n][k];
            }

4. Problem: Permutation of n,r (gfg)
   Approach:P(n, k) = P(n-1, k) + k* P(n-1, k-1)   OR just get the product of n to n-k+1
   Code:    int PermutationCoeff(int n, int k)
            {
                int P = 1;
            
                // Compute n*(n-1)*(n-2)....(n-k+1)
                for (int i = 0; i < k; i++)
                    P *= (n-i) ;
            
                return P;
            }

5. Problem: Catalan Numbers (gfg)
   Approach:C0=1 and C{n+1}=sum( {i=0 to n} Ci*C{n-i} ) for n>=0 
   Similar problems -> a) Number of BST's for n nodes               = nth Catalan no
                       b) Number of unlabelled binary trees n nodes = nth Catalan no 
                       c) Number of ways for proper n parantheses   = nth Catalan no
                       d) Mountain Ranges (number of ways up-down without going below sea level)
                                                                    = nth Catalan no
                       e) Dyck Words (no of x >= no of y at any indx of string created cond X==Y)
                                                                    = nth Catalan no
                       f) Path on grid in which you can't go below(or above) diagonal 
                                                                    = nth Catalan no 
                       g) Connect Disjoint Chords (given n pairs of points and we have to find no ways to connect 
                       them without anyone intersecting)            = nth Catalan no
   Code:    unsigned long int catalanDP(unsigned int n)
            {
                // Table to store results of subproblems
                unsigned long int catalan[n + 1];
            
                // Initialize first two values in table
                catalan[0] = catalan[1] = 1;
            
                // Fill entries in catalan[] using recursive formula
                for (int i = 2; i <= n; i++) {
                    catalan[i] = 0;
                    for (int j = 0; j < i; j++)
                        catalan[i] += catalan[j] * catalan[i - j - 1]; //-1 is because computing for n+1 by using n
                }
            
                // Return last entry
                return catalan[n];
            }    

6. Problem: Matrix Chain Multiplication (gfg)
   Approach:dp[i][j] = min(dp[i][j], dp[i][k]+dp[k+1][j]+arr[i-1]*arr[k]*arr[j]) where k->(i to j-1)
   Code:    int matrixChainMemoised(int* p, int i, int j)
            {
                if (i == j)
                {
                    return 0;
                }
                if (dp[i][j] != -1)
                {
                    return dp[i][j];
                }
                dp[i][j] = INT_MAX;
                for (int k = i; k < j; k++)
                {
                    dp[i][j] = min(
                        dp[i][j], matrixChainMemoised(p, i, k)
                                + matrixChainMemoised(p, k + 1, j)
                                + p[i - 1] * p[k] * p[j]);
                }
                return dp[i][j];
            }

7. Problem: Edit Distance (gfg)
   Approach:1. If last characters of two strings are same, nothing much to do. Ignore last characters and get count for remaining strings. So we recur for lengths m-1 and n-1.
            2. Else (If last characters are not same), we consider all operations on ‘str1’, consider all three operations on last character of first string, recursively compute minimum cost for all three operations and take minimum of three values. 
               a.  Insert: Recur for m and n-1
               b.  Remove: Recur for m-1 and n
               c.  Replace: Recur for m-1 and n-1
   Code:    int editDistDP(string str1, string str2, int m, int n)
            {
                // Create a table to store results of subproblems
                int dp[m + 1][n + 1];
            
                // Fill d[][] in bottom up manner
                for (int i = 0; i <= m; i++) {
                    for (int j = 0; j <= n; j++) {
                        // If first string is empty, only option is to
                        // insert all characters of second string
                        if (i == 0)
                            dp[i][j] = j; // Min. operations = j
            
                        // If second string is empty, only option is to
                        // remove all characters of second string
                        else if (j == 0)
                            dp[i][j] = i; // Min. operations = i
            
                        // If last characters are same, ignore last char
                        // and recur for remaining string
                        else if (str1[i - 1] == str2[j - 1])
                            dp[i][j] = dp[i - 1][j - 1];
            
                        // If the last character is different, consider
                        // all possibilities and find the minimum
                        else
                            dp[i][j]
                                = 1
                                + min(dp[i][j - 1], // Insert
                                        dp[i - 1][j], // Remove
                                        dp[i - 1][j - 1]); // Replace
                    }
                }
            
                return dp[m][n];
            }

8. Problem: Partition Equal Subset Sum
   Approach:Just have to check whether there is a subset with sum as 
            ( = totalSum/2) when totalSum%2==0. Else false. To check 
            use Knapsack dp approach and store boolean in dp array.
   Code:    bool findPartiion(int arr[], int n)
            {
                int sum = 0;
                int i, j;
            
                // Calculate sum of all elements
                for (i = 0; i < n; i++)
                    sum += arr[i];
            
                if (sum % 2 != 0)
                    return false;
            
                bool part[sum / 2 + 1][n + 1];
            
                // initialize top row as true
                for (i = 0; i <= n; i++)
                    part[0][i] = true;
            
                // initialize leftmost column,
                // except part[0][0], as 0
                for (i = 1; i <= sum / 2; i++)
                    part[i][0] = false;
            
                // Fill the partition table in bottom up manner
                for (i = 1; i <= sum / 2; i++) {
                    for (j = 1; j <= n; j++) {
                        part[i][j] = part[i][j - 1];
                        if (i >= arr[j - 1])
                            part[i][j] = part[i][j]
                                        || part[i - arr[j - 1]][j - 1];
                    }
                }
            
                /* // uncomment this part to print table
                for (i = 0; i <= sum/2; i++)
                {
                for (j = 0; j <= n; j++)
                    cout<<part[i][j];
                cout<<endl;
                } */
            
                return part[sum / 2][n];
            }

9. Problem: Friends Pairing
   Approach:Number of ways for n f(n) = f(n-1)(...when left single) + f(n-2)*(n-1)(...when paired with any n-1 elements)
   Code:    int countFriendsPairings(int n) 
            { 
                // code here
                long int dp[n+1];
                dp[1] = 1;
                dp[0] = 1;
                int mod = 1000000007;
                for(int i=2; i<=n ;i++){
                    //          single          paired
                    dp[i] = ( dp[i-1]%mod +( ( (i-1)%mod) * (dp[i-2]%mod) )%mod)%mod;
                }
                return dp[n];
            }

10. Problem: Assembly line problem
    Approach:The minimum time taken at i,j T(i,j) = min( T((i+1)%2,j-1)+t((i+1)%2,j) , T(i, j-1) ) +a(i,j) 
    Code:   int carAssembly(int a[][NUM_STATION], 
                int t[][NUM_STATION], 
                int *e, int *x) 
            { 
                int T1[NUM_STATION], T2[NUM_STATION], i; 
            
                // time taken to leave first station in line 1 
                T1[0] = e[0] + a[0][0]; 
                
                // time taken to leave first station in line 2 
                T2[0] = e[1] + a[1][0]; 
            
                // Fill tables T1[] and T2[] using the 
                // above given recursive relations 
                for (i = 1; i < NUM_STATION; ++i) 
                { 
                    T1[i] = min(T1[i - 1] + a[0][i], 
                                T2[i - 1] + t[1][i] + a[0][i]); 
                    T2[i] = min(T2[i - 1] + a[1][i],
                                T1[i - 1] + t[0][i] + a[1][i]); 
                } 
            
                // Consider exit times and return minimum 
                return min(T1[NUM_STATION - 1] + x[0], 
                        T2[NUM_STATION - 1] + x[1]); 
            } 

11. Problem: Painting the fence
    Code:   long long countWays(int n, int k){
                // code here
                // 0th row for : last 2 fences with same color
                // 1st row for : last 2 fences with diff color
                long long int dp[2][n+1];
                dp[0][1] = 0;
                dp[1][1] = k;
                int mod  = 1000000007;
                for(int i=2; i<=n ;i++){
                    // for last 2 same colored we just have to color ith fence with i-1th color of 
                    // sequence with last two diff colored of i-1 length
                    dp[0][i] = dp[1][i-1];

                    // for last 2 diff colored i lengthed seq. we have (k-1) choices for ith fence 
                    dp[1][i] = ( ((dp[0][i-1] + dp[1][i-1])%mod) * ((k-1)%mod) ) %mod;
                }
                return (dp[0][n] + dp[1][n])%mod;
            }
    
12. Problem: Maximize the sut segment (gfg)
    Approach:Just add 1 to max of (i-x,i-y,i-z) and store for i. if no way possible then store -1.
    Code:   int maximizeTheCuts(int n, int x, int y, int z)
            {
                //Your code here
                int dp[n+1];
                dp[0] = 0;
                for(int i=1; i<=n ;i++){
                    int mx = -1;
                    if(i-x >=0 ){
                        mx = dp[i-x];
                    }
                    if (i-y>=0){
                        mx = max(mx, dp[i-y]);
                    }
                    if (i-z>=0){
                        mx = max(mx, dp[i-z]);
                    }
                    if (mx!=-1){
                        dp[i] = 1+mx;
                    }
                    else {
                        dp[i] = -1;
                    }
                }
                if (dp[n]==-1){
                    return 0;
                }
                return dp[n];
            }

13. Problem: Longest common subsequence
    Approach:if s[i]==t[j] then, return 1+fun(i+1,j+1,s,t)
             else, return max(fun(i,j+1,s,t), fun(i+1,j,s,t))
             Use memoization(dp[i][j]) to optimise
    Code:   int dp[1005][1005];
            int fun(int i, int j, int n, int m, string s, string t){
                if(i>=n || j>=m){
                    return 0;
                }
                if(dp[i][j]!=-1){
                    return dp[i][j];
                }
                int ans = 0;
                if(s[i]==t[j]){
                    ans = 1 + fun(i+1, j+1, n, m, s, t);
                }else{
                    ans = max( fun(i, j+1, n, m, s, t), fun(i+1, j, n, m, s, t) );
                }
                return dp[i][j] = ans;
            }
            int lcs(int x, int y, string s1, string s2)
            {
                // your code here
                for(int i=0; i<1005 ;i++){
                    for(int j=0; j<1005 ;j++){
                        dp[i][j] = -1;
                    }
                }
                return fun(0, 0, x, y, s1, s2);
            }  

